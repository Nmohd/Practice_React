1.UseState 
+------------
1. creating state 
Simple
based on function(lazy evaluation)

const [ount, setCoutn]= UseState(
    ()=> localStoreage.getItem('count')
)
2.updating function
+__________________
simple way
setCoutn(1000)
Base on current state ( call back function it must be pure and retur next state)
setCoutn((c) => c+1)

Refs
________________
Refs stands for reference  
3 steps
declare the ref( const inputEl= useRef(null))
select the element(ref={inputEl})
use in useeffect

refs persisted across renders
it has has a box named current 

custom hooks are used for reusing the logic across the project
custom hooks allow us to reuse state ful logic among different components
Custom hooks name start with use keyword 
Optional chaining ?.

_________________________________
Class components
__+_+_+_+_____________+________+________________
weather app started using class components 
this keyword is very important

Life cycle methods
________________________________+________________________________
Specials methods used to run side effects
-component did mount(immediately as app loads)

component did update(component re renders) 
-It gives acces to previos state 

*Component will unmount (cleaning method)

UseEffect solves this issue of spreading of mount and update.

++++_____________________+++++________________________________
React advance Redux started
++++_________________________++++______________________________
UseReducer 
Another powerful way of managing state
Important to understand Redux
Transforming useState to useReducer





